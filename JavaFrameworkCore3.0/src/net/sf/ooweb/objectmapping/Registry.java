/*
 * ooweb
 *    
 * Copyright(c)2005, ooweb developers (see the accompanying "AUTHORS" file)
 *
 * This software is licensed under the 
 * APACHE LICENSE, Version 2.0
 *    
 * For more information on distributing and using this program, please
 * see the accompanying "COPYING" file.
 */
package net.sf.ooweb.objectmapping;

import java.lang.reflect.Method;





/**
 * Registry is the URL -> object mapper.  It manages 
 * controllers (any dynamic object you like so long as it has the correct 
 * annotation).  It watches and tracks special objects such as login form
 * providers, authenticators and error handlers.
 * 
 * @author Darren Davison
 * @since 0.7
 */
public interface Registry {

    /**
     * @return true if we hold a valid Authenticator, false otherwise
     */
    public boolean hasAuthenticator();

    /**
     * @return true if we hold a valid LoginForm, false otherwise
     */
    public boolean hasLoginForm();
    
    /**
     * @return true if a custom ErrorHandler has been registered, false otherwise
     */
    public boolean hasErrorHandler();

    /**
     * Checks to see if a controller exists that can handle the path
     * supplied.
     * 
     * @param oam
     * @return true if a controller exists that may be able to handle this
     * mapping, false otherwise.
     */
    public boolean hasController(ObjectAndMethod oam);

    /**
     * @param oam the ObjectAndMethod that will be checked
     * @return true if the method is in the registry, false otherwise
     */
    public boolean hasMethod(ObjectAndMethod oam); 
    
    /**
     * @return the Authenticator (if any) associated with this Registry
     */
    public Authenticator getAuthenticator();

    /**
     * @return the LoginForm (if any) associated with this Registry
     */
    public LoginForm getLoginForm();
    
    /**
     * @return the ErrorHandler (if any) associated with this Registry
     */
    public ErrorHandler getErrorHandler();

    /**
     * @param oam the path to check against
     * @return the controller mapped against the path supplied
     */
    public Object getController(ObjectAndMethod oam);
    
    /**
     * @param oam the path to check against
     * @return Method that matches the name.  Searches for a Method that accepts
     * a RequestState fist, then one with no args, then returns null
     */
    public Method getMethod(ObjectAndMethod oam);
    
    /**
     * Return the roles which a User must have to access the method specified
     * in the oam.  Null if there's no such object/method or if the method is
     * not secured
     * 
     * @param oam
     * @return an array of roles or null
     */
    public String[] getRolesFor(ObjectAndMethod oam);
    
    /**
     * lets a client know whether the method was explicitly (or implicitly at
     * class level) marked as being safe to cache.
     * 
     * @param oam
     * @return true if the method/object is cacheable, false otherwise
     */
    public boolean isCacheable(ObjectAndMethod oam);
    
    /**
     * returns the timeout limit for any cached content generated by this 
     * particular object and method.
     * 
     * @param oam
     * @return the cache timeout (0 for unlimited) or -1 for "not cacheable"
     */
    public long getCacheTimeout(ObjectAndMethod oam);

}